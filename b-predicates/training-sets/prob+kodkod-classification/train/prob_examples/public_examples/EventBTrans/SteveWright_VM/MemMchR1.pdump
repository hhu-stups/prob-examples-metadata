#source:examples/prob_examples/public_examples/EventBTrans/SteveWright_VM/MemMchR1.mch
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
2.5187080866666666E8,3.10705409E8,-1.0,1.6455336253333333E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status))) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr):StopInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (instArray(instPtr):StopInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr):StopInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
3.705079626666667E8,3.580993316666667E8,-1.0,1.7759757253333333E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)) => not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
3.484911266666667E8,3.83689597E8,-1.0,1.6346238813333333E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status))) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
3.30374531E8,4.953156636666667E8,-1.0,2.0146674376666667E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (status=LOADING)
4.11625389E8,3.762159743333333E8,2.15631983E8,1.4720834733333333E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status))) => not((status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((status=HALTED))
2.51265961E8,3.20583225E8,1.56450109E8,1.401798953E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status))) => not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
3.49368566E8,3.489565493333333E8,-1.0,1.8976172876666667E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
2.779641413333333E8,3.255471943333333E8,-1.0,1.4810821033333333E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))) => (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,2.0962344433333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(Inst/={})
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & InvalidInst/<:ValidInst
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & StopInst/\ExecInst={}
-1.0,-1.0,1.5110378233333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(StopInst/\ExecInst={})
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & JumpInst/\IncrInst={}
-1.0,-1.0,1.4637035866666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(JumpInst/\IncrInst={})
-1.0,-1.0,2.03204728E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(StopInst/\IncrInst={})
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & Op1WriteInst/<:ResultWriteInst
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & Op2WriteInst/<:ResultWriteInst
-1.0,-1.0,2.3354778566666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(Op2WriteInst/<:ResultWriteInst)
-1.0,-1.0,2.0780999233333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(SingleOpInst/<:DualOpInst)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & Op1WriteInst=Op1WriteImmInst\/Op1WriteDirInst\/Op1WriteIndirInst\/Op1WriteInstPtrInst
-1.0,-1.0,2.58290061E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(Op1WriteInst=Op1WriteImmInst\/Op1WriteDirInst\/Op1WriteIndirInst\/Op1WriteInstPtrInst)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & Data/={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & InstArrayDom/={}
-1.0,-1.0,2.24303291E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(InstArrayDom/={})
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & RwDom/={}
-1.0,-1.0,2.4018932853333335E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(RwDom/={})
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & 0/:RoDom
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & RoDom/={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & RoDom/\RwDom={}
-1.0,-1.0,2.3457154233333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(RoDom/\RwDom={})
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((Inst/={}) & (InvalidInst/<:ValidInst) & (StopInst/\ExecInst={}) & (JumpInst/\IncrInst={}) & (StopInst/\IncrInst={}) & (StopInst/\JumpInst={}) & (Op1WriteInst/<:ResultWriteInst) & (Op2WriteInst/<:ResultWriteInst) & (SingleOpInst/<:DualOpInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteDirInst\/Op1WriteIndirInst\/Op1WriteInstPtrInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteDirInst\/Op2WriteIndirInst\/Op2WriteInstPtrInst) & (Data/={}) & (InstArrayDom/={}) & (0/:RwDom) & (RwDom/={}) & (0/:RoDom) & (RoDom/={}) & (RoDom/\RwDom={}))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):StopInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):StopInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):StopInst) & (status=RUNNING)))
-1.0,-1.0,2.11649005E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,1.4065198766666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((status=LOADING)))
-1.0,-1.0,1.7531370433333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (status=HALTED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((status=HALTED)))
-1.0,-1.0,1.5846007133333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((status=FAILED)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,2.3741017393333335E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,2.378461116E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,1.4997463533333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (status=LOADING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((status=LOADING))
-1.0,-1.0,1.66287254E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (status=HALTED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((status=HALTED)))
-1.0,-1.0,1.4459331766666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (status=FAILED))
-1.0,-1.0,2.3885688256666665E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.8746124533333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,1.4727999533333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (status=LOADING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)) => (status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((status=LOADING))
-1.0,-1.0,1.8165755133333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (status=HALTED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)) => (status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((status=HALTED)))
-1.0,-1.0,1.87478892E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((status=FAILED)))
-1.0,-1.0,1.8337199166666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.53419696E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,2.16691522E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,1.5031927833333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & (status=LOADING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((status=LOADING))
-1.0,-1.0,1.55889609E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & (status=HALTED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((status=HALTED)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((status=FAILED)))
-1.0,-1.0,1.9573753033333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,2.1503302433333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,2.0049998433333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & (status=LOADING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & not((status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) => not((status=HALTED)))
-1.0,-1.0,1.4607926033333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.5841141533333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,1.5017766333333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & (status=HALTED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=LOADING)) => (status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((status=HALTED)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=LOADING)) => (status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((status=FAILED)))
-1.0,-1.0,1.5542402433333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.6526205366666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,1.7749826966666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=LOADING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,1.5838606266666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=HALTED) => not((status=FAILED)))
-1.0,-1.0,1.56485123E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=HALTED) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.6430234133333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=HALTED)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=HALTED) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.6142313433333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=HALTED) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,1.7710746166666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=FAILED) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.51183611E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=FAILED)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=FAILED) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.5010176933333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=FAILED)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,1.5170476633333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,2.4780523166666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,1.5207336566666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1Writable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => op1Writable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Writable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => op1Writable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Writable:BOOL) => instArray(instPtr):StopInst&status=RUNNING => op2Writable:BOOL)
-1.0,-1.0,1.3120795633333333E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2Writable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => op2Writable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Writable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => op2Writable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instArray:InstArrayDom-->Inst & instArray(instPtr):StopInst&status=RUNNING => instArray:InstArrayDom-->Inst
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instArray:InstArrayDom-->Inst) => instArray(instPtr):StopInst&status=RUNNING => instArray:InstArrayDom-->Inst)
-1.0,-1.0,2.15475748E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instArray:InstArrayDom-->Inst & not(instArray(instPtr):StopInst&status=RUNNING => instArray:InstArrayDom-->Inst)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instArray:InstArrayDom-->Inst) => not(instArray(instPtr):StopInst&status=RUNNING => instArray:InstArrayDom-->Inst))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Readable:BOOL) => instArray(instPtr):StopInst&status=RUNNING => op2Readable:BOOL)
-1.0,-1.0,1.36713358E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2Readable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => op2Readable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Readable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => op2Readable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instPtr:InstArrayDom & instArray(instPtr):StopInst&status=RUNNING => instPtr:InstArrayDom
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:InstArrayDom) => instArray(instPtr):StopInst&status=RUNNING => instPtr:InstArrayDom)
-1.0,-1.0,1.35022757E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instPtr:InstArrayDom & not(instArray(instPtr):StopInst&status=RUNNING => instPtr:InstArrayDom)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:InstArrayDom) => not(instArray(instPtr):StopInst&status=RUNNING => instPtr:InstArrayDom))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:POW(INTEGER*Data)) => instArray(instPtr):StopInst&status=RUNNING => roArray:POW(INTEGER*Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instArray:POW(INTEGER*Inst)) => instArray(instPtr):StopInst&status=RUNNING => instArray:POW(INTEGER*Inst))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Readable:BOOL) => instArray(instPtr):StopInst&status=RUNNING => op1Readable:BOOL)
-1.0,-1.0,1.3206709666666667E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1Readable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => op1Readable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:RoDom-->Data & instArray(instPtr):StopInst&status=RUNNING => roArray:RoDom-->Data
-1.0,-1.0,4.043018556666667E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:RoDom-->Data & not(instArray(instPtr):StopInst&status=RUNNING => roArray:RoDom-->Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:RoDom-->Data) => not(instArray(instPtr):StopInst&status=RUNNING => roArray:RoDom-->Data))
-1.0,-1.0,2.1599804466666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & resReadable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => resReadable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resReadable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => resReadable:BOOL))
8.6893452E7,8.313610766666667E7,1.49045117E8,1.0876569333333333E8:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & resWritable:BOOL & instArray(instPtr):StopInst&status=RUNNING => resWritable:BOOL
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resWritable:BOOL) => instArray(instPtr):StopInst&status=RUNNING => resWritable:BOOL)
-1.0,-1.0,2.2770369966666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & resWritable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => resWritable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resWritable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => resWritable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:POW(INTEGER*Data)) => instArray(instPtr):StopInst&status=RUNNING => rwArray:POW(INTEGER*Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:POW(INTEGER*Data)) => not(instArray(instPtr):StopInst&status=RUNNING => rwArray:POW(INTEGER*Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & rwArray:RwDom-->Data & instArray(instPtr):StopInst&status=RUNNING => rwArray:RwDom-->Data
-1.0,-1.0,3.658060383333333E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & rwArray:RwDom-->Data & not(instArray(instPtr):StopInst&status=RUNNING => rwArray:RwDom-->Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:RwDom-->Data) => not(instArray(instPtr):StopInst&status=RUNNING => rwArray:RwDom-->Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(jumpConditional:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => jumpConditional:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2:Data) => instArray(instPtr):StopInst&status=RUNNING => op2:Data)
-1.0,-1.0,2.2241008E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2:Data & not(instArray(instPtr):StopInst&status=RUNNING => op2:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2:Data) => not(instArray(instPtr):StopInst&status=RUNNING => op2:Data))
9.097730466666667E7,1.00014394E8,1.3959161066666666E8,1.3007217366666667E8:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & result:Data & instArray(instPtr):StopInst&status=RUNNING => result:Data
-1.0,-1.0,2.1724047466666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & result:Data & not(instArray(instPtr):StopInst&status=RUNNING => result:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(result:Data) => not(instArray(instPtr):StopInst&status=RUNNING => result:Data))
1.06474713E8,9.112373833333333E7,1.3859206566666666E8,1.1918612933333333E8:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1:Data & instArray(instPtr):StopInst&status=RUNNING => op1:Data
-1.0,-1.0,1.72407585E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1:Data & not(instArray(instPtr):StopInst&status=RUNNING => op1:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1:Data) => not(instArray(instPtr):StopInst&status=RUNNING => op1:Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst&status=RUNNING => op1Writable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => op2Writable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => instArray:InstArrayDom-->Inst) & (instArray(instPtr):StopInst&status=RUNNING => op2Readable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => instPtr:InstArrayDom) & (instArray(instPtr):StopInst&status=RUNNING => roArray:POW(INTEGER*Data)) & (instArray(instPtr):StopInst&status=RUNNING => instArray:POW(INTEGER*Inst)) & (instArray(instPtr):StopInst&status=RUNNING => op1Readable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => status:Status) & (instArray(instPtr):StopInst&status=RUNNING => roArray:RoDom-->Data) & (instArray(instPtr):StopInst&status=RUNNING => resReadable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => resWritable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => instPtr:INTEGER) & (instArray(instPtr):StopInst&status=RUNNING => rwArray:POW(INTEGER*Data)) & (instArray(instPtr):StopInst&status=RUNNING => rwArray:RwDom-->Data) & (instArray(instPtr):StopInst&status=RUNNING => jumpConditional:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => op2:Data) & (instArray(instPtr):StopInst&status=RUNNING => result:Data) & (instArray(instPtr):StopInst&status=RUNNING => op1:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Writable:BOOL) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Writable:BOOL))
-1.0,-1.0,2.4072288333333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1Writable:BOOL & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Writable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Writable:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Writable:BOOL)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Writable:BOOL) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Writable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Writable:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Writable:BOOL)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instArray:InstArrayDom-->Inst & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:InstArrayDom-->Inst)
-1.0,-1.0,2.0132318E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instArray:InstArrayDom-->Inst & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:InstArrayDom-->Inst))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2Readable:BOOL & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Readable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instPtr:InstArrayDom & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => ptrInc+instPtr:InstArrayDom)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:InstArrayDom) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => ptrInc+instPtr:InstArrayDom))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:POW(INTEGER*Data) & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:POW(INTEGER*Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:POW(INTEGER*Data)) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:POW(INTEGER*Data)))
-1.0,-1.0,1.3594335833333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:POW(INTEGER*Data) & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:POW(INTEGER*Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:POW(INTEGER*Data)) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:POW(INTEGER*Data))))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instArray:POW(INTEGER*Inst) & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:POW(INTEGER*Inst))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Readable:BOOL) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Readable:BOOL))
-1.0,-1.0,1.3310521766666667E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1Readable:BOOL & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Readable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Readable:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Readable:BOOL)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & status:Status & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => status:Status)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(status:Status) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => status:Status))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(status:Status) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => status:Status)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:RoDom-->Data & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:RoDom-->Data) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data))
-1.0,-1.0,2.34212605E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:RoDom-->Data & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:RoDom-->Data) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & resReadable:BOOL & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resReadable:BOOL)
-1.0,-1.0,1.44247533E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & resReadable:BOOL & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resReadable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resReadable:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resReadable:BOOL)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & resWritable:BOOL & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resWritable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resWritable:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resWritable:BOOL)))
-1.0,-1.0,1.3502056833333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instPtr:INTEGER & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instPtr:INTEGER))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:INTEGER) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instPtr:INTEGER)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & rwArray:POW(INTEGER*Data) & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:POW(INTEGER*Data))
-1.0,-1.0,1.3883995533333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & rwArray:POW(INTEGER*Data) & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:POW(INTEGER*Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & rwArray:RwDom-->Data & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:RwDom-->Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:RwDom-->Data) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:RwDom-->Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2:Data & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2:Data) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2:Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & result:Data & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => result:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(result:Data) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => result:Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(result:Data) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => result:Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1:Data & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1:Data) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1:Data))
-1.0,-1.0,1.3022552166666667E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1:Data & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1:Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Writable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Writable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:InstArrayDom-->Inst)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Readable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => ptrInc+instPtr:InstArrayDom)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:POW(INTEGER*Data))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:POW(INTEGER*Inst))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Readable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => status:Status)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resReadable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resWritable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instPtr:INTEGER)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:POW(INTEGER*Data))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:RwDom-->Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => jumpConditional:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2:Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => result:Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1:Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) => not((!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Writable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Writable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:InstArrayDom-->Inst)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Readable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => ptrInc+instPtr:InstArrayDom)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:POW(INTEGER*Data))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:POW(INTEGER*Inst))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Readable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => status:Status)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resReadable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resWritable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instPtr:INTEGER)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:POW(INTEGER*Data))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:RwDom-->Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => jumpConditional:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2:Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => result:Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1:Data))))
