#source:examples/prob_examples/public_examples/EventBTrans/SteveWright_VM/MemMchR4.mch
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr):StopInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr):StopInst) & (status=RUNNING))
1.0525798006666666E9,8.657448686666666E8,-1.0,-1.0:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status))) => not((instArray(instPtr):StopInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status)) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & StopInst/\JumpInst={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & Op2WriteInst/<:ResultWriteInst
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & Op2WriteInst=Op2WriteImmInst\/Op2WriteDirInst\/Op2WriteIndirInst\/Op2WriteInstPtrInst
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & not(Op2WriteInst=Op2WriteImmInst\/Op2WriteDirInst\/Op2WriteIndirInst\/Op2WriteInstPtrInst)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & not(InstArrayDom/={})
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & 0/:RoDom
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & RoDom/\RwDom={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & !x.(x:Data => (x:DataSmall => x:DataMed))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & 0/:RoSmallDom
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & RoSmallDom/={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & !x.(x:INTEGER => (x:RwDom => 2+x:RwSmallDom))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & !x.(x:INTEGER => (x:RoDom => 1+x:RoSmallDom))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & not(!x.(x:INTEGER => (x:RoDom => 1+x:RoSmallDom)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & !x.(x:INTEGER => (x:RoDom => 2+x:RoSmallDom))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING) & (status=LOADING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING) & not((status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING) => not((status=LOADING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((status=HALTED)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((status=FAILED)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (not((status=LOADING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (not((status=HALTED)) => (status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & ((status=FAILED) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(resultDataLarge):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2Writable:BOOL) & (op2Readable:BOOL) & (resWritable:BOOL) & (resReadable:BOOL) & (op1DataLarge:DataLarge) & (op2DataLarge:DataLarge) & (resultDataLarge:DataLarge) & (rwSmallArray:RwSmallDom-->DataSmall) & (roSmallArray:RoSmallDom-->DataSmall) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1DataLarge:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2DataLarge:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (resultDataLarge:Data) & (roSmallArray:POW(INTEGER*Data)) & (rwSmallArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(resultDataLarge)/:InstArrayDom) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (not(op1Writable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => op1Writable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (not(op2Writable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => op2Writable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (not(instArray:InstArrayDom-->Inst) => instArray(instPtr):StopInst&status=RUNNING => instArray:InstArrayDom-->Inst)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & instArray:InstArrayDom-->Inst & not(instArray(instPtr):StopInst&status=RUNNING => instArray:InstArrayDom-->Inst)
9.489782133333333E7,9.4845557E7,1.1085306266666667E8,1.3092789266666667E8:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & op2Readable:BOOL & instArray(instPtr):StopInst&status=RUNNING => op2Readable:BOOL
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (not(op2Readable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => op2Readable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (not(op1DataLarge:DataLarge) => not(instArray(instPtr):StopInst&status=RUNNING => op1DataLarge:DataLarge))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & rwSmallArray:POW(INTEGER*Data) & not(instArray(instPtr):StopInst&status=RUNNING => rwSmallArray:POW(INTEGER*Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & op1Readable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => op1Readable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (not(status:Status) => instArray(instPtr):StopInst&status=RUNNING => status:Status)
9.405348733333333E7,9.353556766666667E7,1.30611465E8,9.5006425E7:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & resWritable:BOOL & instArray(instPtr):StopInst&status=RUNNING => resWritable:BOOL
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (not(resWritable:BOOL) => instArray(instPtr):StopInst&status=RUNNING => resWritable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (not(instPtr:INTEGER) => instArray(instPtr):StopInst&status=RUNNING => instPtr:INTEGER)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & instPtr:INTEGER & not(instArray(instPtr):StopInst&status=RUNNING => instPtr:INTEGER)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & jumpConditional:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => jumpConditional:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & roSmallArray:RoSmallDom-->DataSmall & not(instArray(instPtr):StopInst&status=RUNNING => roSmallArray:RoSmallDom-->DataSmall)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (not(roSmallArray:POW(INTEGER*Data)) => instArray(instPtr):StopInst&status=RUNNING => roSmallArray:POW(INTEGER*Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & (not(rwSmallArray:RwSmallDom-->DataSmall) => instArray(instPtr):StopInst&status=RUNNING => rwSmallArray:RwSmallDom-->DataSmall)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (Op1WriteDirInst<:Op1WriteMemInst) & (Op1WriteDirInst/={}) & (Op1WriteIndirInst<:Op1WriteMemInst) & (Op1WriteIndirInst/={}) & (Op1WriteMemInst=Op1WriteIndirInst\/Op1WriteDirInst) & (Op1WriteIndirInst/\Op1WriteDirInst={}) & (Op2WriteDirInst<:Op2WriteMemInst) & (Op2WriteDirInst/={}) & (Op2WriteIndirInst<:Op2WriteMemInst) & (Op2WriteIndirInst/={}) & (Op2WriteMemInst=Op2WriteIndirInst\/Op2WriteDirInst) & (Op2WriteIndirInst/\Op2WriteDirInst={}) & (StoreDirInst<:StoreWriteInst) & (StoreDirInst/={}) & (StoreIndirInst<:StoreWriteInst) & (StoreIndirInst/={}) & (StoreWriteInst=StoreIndirInst\/StoreDirInst) & (StoreIndirInst/\StoreDirInst={}) & (Op1WriteImmSmallInst<:Op1WriteImmInst) & (Op1WriteImmSmallInst/={}) & (Op1WriteImmMedInst<:Op1WriteImmInst) & (Op1WriteImmMedInst/={}) & (Op1WriteImmLargeInst<:Op1WriteImmInst) & (Op1WriteImmLargeInst/={}) & (Op1WriteImmInst=Op1WriteImmMedInst\/Op1WriteImmLargeInst\/Op1WriteImmSmallInst) & (Op1WriteImmMedInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmSmallInst={}) & (Op1WriteImmLargeInst/\Op1WriteImmMedInst={}) & (Op2WriteImmSmallInst<:Op2WriteImmInst) & (Op2WriteImmSmallInst/={}) & (Op2WriteImmMedInst<:Op2WriteImmInst) & (Op2WriteImmMedInst/={}) & (Op2WriteImmLargeInst<:Op2WriteImmInst) & (Op2WriteImmLargeInst/={}) & (Op2WriteImmInst=Op2WriteImmMedInst\/Op2WriteImmLargeInst\/Op2WriteImmSmallInst) & (Op2WriteImmMedInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmSmallInst={}) & (Op2WriteImmLargeInst/\Op2WriteImmMedInst={}) & (Op1WriteDirSmallInst<:Op1WriteDirInst) & (Op1WriteDirSmallInst/={}) & (Op1WriteDirMedInst<:Op1WriteDirInst) & (Op1WriteDirMedInst/={}) & (Op1WriteDirLargeInst<:Op1WriteDirInst) & (Op1WriteDirLargeInst/={}) & (Op1WriteDirInst=Op1WriteDirMedInst\/Op1WriteDirLargeInst\/Op1WriteDirSmallInst) & (Op1WriteDirMedInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirSmallInst={}) & (Op1WriteDirLargeInst/\Op1WriteDirMedInst={}) & (Op2WriteDirSmallInst<:Op2WriteDirInst) & (Op2WriteDirSmallInst/={}) & (Op2WriteDirMedInst<:Op2WriteDirInst) & (Op2WriteDirMedInst/={}) & (Op2WriteDirLargeInst<:Op2WriteDirInst) & (Op2WriteDirLargeInst/={}) & (Op2WriteDirInst=Op2WriteDirMedInst\/Op2WriteDirLargeInst\/Op2WriteDirSmallInst) & (Op2WriteDirMedInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirSmallInst={}) & (Op2WriteDirLargeInst/\Op2WriteDirMedInst={}) & (Op1WriteIndirSmallInst<:Op1WriteIndirInst) & (Op1WriteIndirSmallInst/={}) & (Op1WriteIndirMedInst<:Op1WriteIndirInst) & (Op1WriteIndirMedInst/={}) & (Op1WriteIndirLargeInst<:Op1WriteIndirInst) & (Op1WriteIndirLargeInst/={}) & (Op1WriteIndirInst=Op1WriteIndirMedInst\/Op1WriteIndirLargeInst\/Op1WriteIndirSmallInst) & (Op1WriteIndirMedInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirSmallInst={}) & (Op1WriteIndirLargeInst/\Op1WriteIndirMedInst={}) & (Op2WriteIndirSmallInst<:Op2WriteIndirInst) & (Op2WriteIndirSmallInst/={}) & (Op2WriteIndirMedInst<:Op2WriteIndirInst) & (Op2WriteIndirMedInst/={}) & (Op2WriteIndirLargeInst<:Op2WriteIndirInst) & (Op2WriteIndirLargeInst/={}) & (Op2WriteIndirInst=Op2WriteIndirMedInst\/Op2WriteIndirLargeInst\/Op2WriteIndirSmallInst) & (Op2WriteIndirMedInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirSmallInst={}) & (Op2WriteIndirLargeInst/\Op2WriteIndirMedInst={}) & (StoreDirSmallInst<:StoreDirInst) & (StoreDirSmallInst/={}) & (StoreDirMedInst<:StoreDirInst) & (StoreDirMedInst/={}) & (StoreDirLargeInst<:StoreDirInst) & (StoreDirLargeInst/={}) & (StoreDirInst=StoreDirMedInst\/StoreDirLargeInst\/StoreDirSmallInst) & (StoreDirMedInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (StoreIndirSmallInst<:StoreIndirInst) & (StoreIndirSmallInst/={}) & (StoreIndirMedInst<:StoreIndirInst) & (StoreIndirMedInst/={}) & (StoreIndirLargeInst<:StoreIndirInst) & (StoreIndirLargeInst/={}) & (StoreIndirInst=StoreIndirMedInst\/StoreIndirLargeInst\/StoreIndirSmallInst) & (StoreIndirMedInst/\StoreIndirSmallInst={}) & (StoreDirLargeInst/\StoreDirSmallInst={}) & (StoreDirLargeInst/\StoreDirMedInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (MinRwPointer>MaxRoPointer) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (DataLarge=Data) & (DataLarge/={}) & (DataMed<:DataLarge) & (DataMed/={}) & (DataSmall<:DataMed) & (DataSmall/={}) & (DataPtr<:Data) & (DataPtr/={}) & (DataLarge2DataSmall:DataLarge-->DataSmall) & (DataSmalls2DataMed:DataSmall*DataSmall-->DataMed) & (DataSmalls2DataLarge:DataSmall*DataSmall*DataSmall*DataSmall-->DataLarge) & (DataLarge2DataSmall0:DataLarge-->DataSmall) & (DataLarge2DataSmall1:DataLarge-->DataSmall) & (DataLarge2DataSmall2:DataLarge-->DataSmall) & (DataLarge2DataSmall3:DataLarge-->DataSmall) & (MinRwAddress:NATURAL1) & (MaxRwAddress:NATURAL1) & (MinRwAddress<=MaxRwAddress) & (RwSmallDom=MinRwAddress..MaxRwAddress) & (MinRoAddress:NATURAL1) & (MaxRoAddress:NATURAL1) & (MinRoAddress<=MaxRoAddress) & (RoSmallDom=MinRoAddress..MaxRoAddress) & (MinRwAddress=MinRwPointer) & (MaxRwAddress=3+MaxRwPointer) & (MinRoAddress=MinRoPointer) & (MaxRoAddress=3+MaxRoPointer) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RwDom-->Data&b:RwSmallDom-->DataSmall&x:RwDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=b(x)))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataMed((b(x),b(1+x)))))) & (!x,a,b.(x:INTEGER&a:POW(INTEGER*Data)&b:POW(INTEGER*Data) => (a:RoDom-->Data&b:RoSmallDom-->DataSmall&x:RoDom => a(x)=DataSmalls2DataLarge((((b(x),b(1+x)),b(2+x)),b(3+x)))))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall0(a)&x:RwDom => {(x,a)}<+A={(x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall1(a)&x:RwDom => {(x,a)}<+A={(1+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall2(a)&x:RwDom => {(x,a)}<+A={(2+x,b)}<+B))) & (!x,A,B,a,b.(x:INTEGER&A:POW(INTEGER*Data)&B:POW(INTEGER*Data)&a:Data&b:Data => (A:RwDom-->Data&B:RwSmallDom-->DataSmall&a:DataLarge&b:DataSmall&b=DataLarge2DataSmall3(a)&x:RwDom => {(x,a)}<+A={(3+x,b)}<+B))) & (Inst2ImmData:Inst-->Data) & rwSmallArray:RwSmallDom-->DataSmall & not(instArray(instPtr):StopInst&status=RUNNING => rwSmallArray:RwSmallDom-->DataSmall)
