#source:examples/prob_examples/public_examples/EventBPrologPackages/OLSR/Rodin_model.zip_unpacked/OLSR/M1.bcm
1.7290040866666666E8,1.2617370083333333E9,-1.0,2.0863039216666667E9:not(not((sent_packet<:MSG) & (lost_packet<:sent_packet) & (got_packet<:sent_packet) & (got_packet/\lost_packet=({} oftype POW(MSG))) & (links:NODES <-> NODES) & (NODES <| (id oftype POW(NODES**NODES))/\links=({} oftype POW(NODES**NODES))) & (travelling_packet<:sent_packet) & (travelling_packet/\got_packet/\lost_packet=({} oftype POW(MSG))) & (travelling_packet\/got_packet\/lost_packet=sent_packet) & (packet_location:sent_packet <-> NODES) & (!m oftype MSG.m:MSG&m/:sent_packet=>m/:got_packet&(!s oftype NODES.s:NODES=>m |-> s/:packet_location)) & (!m oftype MSG.m:got_packet=>m |-> destination(m):packet_location) & (!m oftype MSG,s oftype NODES,r oftype NODES.m |-> s:packet_location&m |-> r:packet_location=>s=r) & (packet_hops:MSG --> NAT) & (!m oftype MSG.m:sent_packet \ (lost_packet\/got_packet)<=>m:travelling_packet) & (dom(packet_location)=sent_packet) & (sent_packet \ lost_packet=got_packet<=>travelling_packet=({} oftype POW(MSG))))) => (msg:travelling_packet) & (destination(msg)=d) & (a/=destination(msg)&msg |-> a:packet_location&msg |-> b/:packet_location) & (a |-> d:closure(links)) & (a |-> b:links)
1.2512944793333333E9,2.5178625466666666E8,-1.0,7.531162564E9:not((msg:travelling_packet) & (destination(msg)=d) & (a/=destination(msg)&msg |-> a:packet_location&msg |-> b/:packet_location) & (a |-> d:closure(links)) & (a |-> b:links)) => not((sent_packet<:MSG) & (lost_packet<:sent_packet) & (got_packet<:sent_packet) & (got_packet/\lost_packet=({} oftype POW(MSG))) & (links:NODES <-> NODES) & (NODES <| (id oftype POW(NODES**NODES))/\links=({} oftype POW(NODES**NODES))) & (travelling_packet<:sent_packet) & (travelling_packet/\got_packet/\lost_packet=({} oftype POW(MSG))) & (travelling_packet\/got_packet\/lost_packet=sent_packet) & (packet_location:sent_packet <-> NODES) & (!m oftype MSG.m:MSG&m/:sent_packet=>m/:got_packet&(!s oftype NODES.s:NODES=>m |-> s/:packet_location)) & (!m oftype MSG.m:got_packet=>m |-> destination(m):packet_location) & (!m oftype MSG,s oftype NODES,r oftype NODES.m |-> s:packet_location&m |-> r:packet_location=>s=r) & (packet_hops:MSG --> NAT) & (!m oftype MSG.m:sent_packet \ (lost_packet\/got_packet)<=>m:travelling_packet) & (dom(packet_location)=sent_packet) & (sent_packet \ lost_packet=got_packet<=>travelling_packet=({} oftype POW(MSG))))
1.6041739666666666E8,1.59430446E8,-1.0,9.961611266666667E7:(sent_packet<:MSG) & (lost_packet<:sent_packet) & (got_packet<:sent_packet) & (got_packet/\lost_packet=({} oftype POW(MSG))) & (links:NODES <-> NODES) & (NODES <| (id oftype POW(NODES**NODES))/\links=({} oftype POW(NODES**NODES))) & (travelling_packet<:sent_packet) & (travelling_packet/\got_packet/\lost_packet=({} oftype POW(MSG))) & (travelling_packet\/got_packet\/lost_packet=sent_packet) & (packet_location:sent_packet <-> NODES) & (!m oftype MSG.m:MSG&m/:sent_packet=>m/:got_packet&(!s oftype NODES.s:NODES=>m |-> s/:packet_location)) & (!m oftype MSG.m:got_packet=>m |-> destination(m):packet_location) & (!m oftype MSG,s oftype NODES,r oftype NODES.m |-> s:packet_location&m |-> r:packet_location=>s=r) & (packet_hops:MSG --> NAT) & (!m oftype MSG.m:sent_packet \ (lost_packet\/got_packet)<=>m:travelling_packet) & (dom(packet_location)=sent_packet) & (sent_packet \ lost_packet=got_packet<=>travelling_packet=({} oftype POW(MSG))) & ((msg:travelling_packet) & (destination(msg)=d) & (msg |-> s:packet_location) & (s/=d) & (s |-> d/:closure(links)) => not((s |-> d/:links) & (s/=d)))
-1.0,-1.0,1.8834946333333334E8,-1.0:(sent_packet<:MSG) & (lost_packet<:sent_packet) & (got_packet<:sent_packet) & (got_packet/\lost_packet=({} oftype POW(MSG))) & (links:NODES <-> NODES) & (NODES <| (id oftype POW(NODES**NODES))/\links=({} oftype POW(NODES**NODES))) & (travelling_packet<:sent_packet) & (travelling_packet/\got_packet/\lost_packet=({} oftype POW(MSG))) & (travelling_packet\/got_packet\/lost_packet=sent_packet) & (packet_location:sent_packet <-> NODES) & (!m oftype MSG.m:MSG&m/:sent_packet=>m/:got_packet&(!s oftype NODES.s:NODES=>m |-> s/:packet_location)) & (!m oftype MSG.m:got_packet=>m |-> destination(m):packet_location) & (!m oftype MSG,s oftype NODES,r oftype NODES.m |-> s:packet_location&m |-> r:packet_location=>s=r) & (packet_hops:MSG --> NAT) & (!m oftype MSG.m:sent_packet \ (lost_packet\/got_packet)<=>m:travelling_packet) & (dom(packet_location)=sent_packet) & (sent_packet \ lost_packet=got_packet<=>travelling_packet=({} oftype POW(MSG))) & (msg:travelling_packet) & (destination(msg)=d) & (msg |-> s:packet_location) & (s/=d) & (s |-> d/:closure(links)) & (msg:travelling_packet) & (destination(msg)=d) & (a/=destination(msg)&msg |-> a:packet_location&msg |-> b/:packet_location) & (a |-> d:closure(links)) & (a |-> b:links)
6.4999965E8,1.74537256E8,-1.0,5.300888542333333E9:(sent_packet<:MSG) & (lost_packet<:sent_packet) & (got_packet<:sent_packet) & (got_packet/\lost_packet=({} oftype POW(MSG))) & (links:NODES <-> NODES) & (NODES <| (id oftype POW(NODES**NODES))/\links=({} oftype POW(NODES**NODES))) & (travelling_packet<:sent_packet) & (travelling_packet/\got_packet/\lost_packet=({} oftype POW(MSG))) & (travelling_packet\/got_packet\/lost_packet=sent_packet) & (packet_location:sent_packet <-> NODES) & (!m oftype MSG.m:MSG&m/:sent_packet=>m/:got_packet&(!s oftype NODES.s:NODES=>m |-> s/:packet_location)) & (!m oftype MSG.m:got_packet=>m |-> destination(m):packet_location) & (!m oftype MSG,s oftype NODES,r oftype NODES.m |-> s:packet_location&m |-> r:packet_location=>s=r) & (packet_hops:MSG --> NAT) & (!m oftype MSG.m:sent_packet \ (lost_packet\/got_packet)<=>m:travelling_packet) & (dom(packet_location)=sent_packet) & (sent_packet \ lost_packet=got_packet<=>travelling_packet=({} oftype POW(MSG))) & (msg:travelling_packet) & (destination(msg)=d) & (msg |-> s:packet_location) & (s/=d) & (s |-> d/:closure(links)) & not((msg:travelling_packet) & (destination(msg)=d) & (msg |-> d:packet_location))
