#source:examples/prob_examples/public_examples/EventBTrans/SteveWright_VM/MemMch.mch
1.7576923266666666E8,2.50342962E8,-1.0,1.6212614976666667E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
1.7780282466666666E8,2.6498106566666666E8,1.7436228E8,1.5369288233333333E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) => (instArray(instPtr):StopInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
2.2990081366666666E8,3.58813389E8,-1.0,2.5149682093333335E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))) => not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status))
3.162608643333333E8,2.6768008233333334E8,-1.0,1.6242990583333333E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
1.5614120166666666E8,1.9424220533333334E8,-1.0,1.0870878903333333E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status=LOADING))) => not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
1.4839196166666666E8,1.9929720133333334E8,-1.0,1.1770472813333333E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))) => (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & Inst/={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & InvalidInst/<:ValidInst
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & StopInst/\ExecInst={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & Op2WriteInst/<:ResultWriteInst
-1.0,-1.0,1.9410429233333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(Data/={})
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & RwDom/={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,1.97461493E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,1.4855317833333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (status=LOADING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,1.0218808553333334E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((status=LOADING)))
-1.0,-1.0,1.70163073E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (status=HALTED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,2.1305900666666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((status=HALTED)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & not((status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (status=HALTED))
-1.0,-1.0,1.87026856E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & not((status=FAILED))
-1.0,-1.0,2.1906703366666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=LOADING)) => (status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=LOADING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=HALTED)) => (status=FAILED))
-1.0,-1.0,1.4498144866666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=HALTED) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=HALTED) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Writable:BOOL) => instArray(instPtr):StopInst&status=RUNNING => op1Writable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Writable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => op1Writable:BOOL))
-1.0,-1.0,1.38317077E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2Writable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => op2Writable:BOOL)
-1.0,-1.0,1.18160021E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2Readable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => op2Readable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Readable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => op2Readable:BOOL))
-1.0,-1.0,1.27693403E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instPtr:InstArrayDom & not(instArray(instPtr):StopInst&status=RUNNING => instPtr:InstArrayDom)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:POW(INTEGER*Data)) => instArray(instPtr):StopInst&status=RUNNING => roArray:POW(INTEGER*Data))
-1.0,-1.0,1.1886018033333333E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:POW(INTEGER*Data) & not(instArray(instPtr):StopInst&status=RUNNING => roArray:POW(INTEGER*Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instArray:POW(INTEGER*Inst)) => instArray(instPtr):StopInst&status=RUNNING => instArray:POW(INTEGER*Inst))
-1.0,-1.0,1.8765356466666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:RoDom-->Data & not(instArray(instPtr):StopInst&status=RUNNING => roArray:RoDom-->Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:RoDom-->Data) => not(instArray(instPtr):StopInst&status=RUNNING => roArray:RoDom-->Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resWritable:BOOL) => instArray(instPtr):StopInst&status=RUNNING => resWritable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:POW(INTEGER*Data)) => not(instArray(instPtr):StopInst&status=RUNNING => rwArray:POW(INTEGER*Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:RwDom-->Data) => not(instArray(instPtr):StopInst&status=RUNNING => rwArray:RwDom-->Data))
-1.0,-1.0,3.185110806666667E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & result:Data & not(instArray(instPtr):StopInst&status=RUNNING => result:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1:Data) => instArray(instPtr):StopInst&status=RUNNING => op1:Data)
-1.0,-1.0,2.6370473933333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instArray:InstArrayDom-->Inst & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:InstArrayDom-->Inst))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instPtr:InstArrayDom & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => ptrInc+instPtr:InstArrayDom)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:InstArrayDom) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => ptrInc+instPtr:InstArrayDom))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:POW(INTEGER*Data)) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:POW(INTEGER*Data))))
-1.0,-1.0,2.0016821533333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instArray:POW(INTEGER*Inst) & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:POW(INTEGER*Inst)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Readable:BOOL) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Readable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & resReadable:BOOL & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resReadable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resReadable:BOOL) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resReadable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:INTEGER) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instPtr:INTEGER)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:POW(INTEGER*Data)) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:POW(INTEGER*Data)))
-1.0,-1.0,1.54609279E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & rwArray:POW(INTEGER*Data) & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:POW(INTEGER*Data)))
-1.0,-1.0,1.3438957566666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & jumpConditional:BOOL & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => jumpConditional:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(jumpConditional:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => jumpConditional:BOOL)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2:Data) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2:Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & result:Data & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => result:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(result:Data) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => result:Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Writable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Writable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:InstArrayDom-->Inst)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Readable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => ptrInc+instPtr:InstArrayDom)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:POW(INTEGER*Data))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:POW(INTEGER*Inst))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Readable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => status:Status)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resReadable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resWritable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instPtr:INTEGER)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:POW(INTEGER*Data))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:RwDom-->Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => jumpConditional:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2:Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => result:Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1:Data))
