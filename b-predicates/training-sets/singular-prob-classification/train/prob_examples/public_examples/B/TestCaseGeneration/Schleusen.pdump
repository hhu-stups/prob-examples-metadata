#source:examples/prob_examples/public_examples/B/TestCaseGeneration/Schleusen.mch
6.6395570666666664E7,1.6826513533333334E8,-1.0,1.6430150333333334E8:not((River<<:SECTORS) & (Locks<<:SECTORS) & (River\/Locks=SECTORS) & (River/\Locks={}) & (left_sector:GATES>->SECTORS) & (right_sector:GATES>->SECTORS) & (TOPOLOGY) & (!dd1.(dd1:GATES => left_sector(dd1):River <=> right_sector(dd1):Locks)) & (Locks<:ran(left_sector)) & (Locks<:ran(right_sector)) & not((lock:Locks) & (dstate(left_sector~(lock))=closed) & (wlevel(left_sector(right_sector~(lock)))/=wlevel(lock)))) => (correct_level(wlevel)) & (dstate:GATES-->GATE_STATE) & (!dd2.(dd2:GATES&dstate(dd2)=opened => wlevel(left_sector(dd2))=wlevel(right_sector(dd2))))
2.2357482266666666E8,8.21367764E8,2.3546849066666666E8,1.0091199433333333E8:not((River<<:SECTORS) & (Locks<<:SECTORS) & (River\/Locks=SECTORS) & (River/\Locks={}) & (left_sector:GATES>->SECTORS) & (right_sector:GATES>->SECTORS) & (TOPOLOGY) & (!dd1.(dd1:GATES => left_sector(dd1):River <=> right_sector(dd1):Locks)) & (Locks<:ran(left_sector)) & (Locks<:ran(right_sector)) & not((correct_level(wlevel)) & (dstate:GATES-->GATE_STATE) & (!dd2.(dd2:GATES&dstate(dd2)=opened => wlevel(left_sector(dd2))=wlevel(right_sector(dd2)))))) => not((dd:GATES) & (dstate(dd)=opened))
-1.0,1.13755946E8,1.49149041E8,-1.0:not((River<<:SECTORS) & (Locks<<:SECTORS) & (River\/Locks=SECTORS) & (River/\Locks={}) & (left_sector:GATES>->SECTORS) & (right_sector:GATES>->SECTORS) & (TOPOLOGY) & (!dd1.(dd1:GATES => left_sector(dd1):River <=> right_sector(dd1):Locks)) & (Locks<:ran(left_sector)) & (Locks<:ran(right_sector)) & (correct_level(wlevel)) & (dstate:GATES-->GATE_STATE) & (!dd2.(dd2:GATES&dstate(dd2)=opened => wlevel(left_sector(dd2))=wlevel(right_sector(dd2))))) => (lock:Locks) & (dstate(right_sector~(lock))=closed) & (wlevel(right_sector(left_sector~(lock)))/=wlevel(lock))
-1.0,1.16042201E8,1.4769177933333334E8,-1.0:not((River<<:SECTORS) & (Locks<<:SECTORS) & (River\/Locks=SECTORS) & (River/\Locks={}) & (left_sector:GATES>->SECTORS) & (right_sector:GATES>->SECTORS) & (TOPOLOGY) & (!dd1.(dd1:GATES => left_sector(dd1):River <=> right_sector(dd1):Locks)) & (Locks<:ran(left_sector)) & (Locks<:ran(right_sector)) & not((correct_level(wlevel)) & (dstate:GATES-->GATE_STATE) & (!dd2.(dd2:GATES&dstate(dd2)=opened => wlevel(left_sector(dd2))=wlevel(right_sector(dd2)))))) => (lock:Locks) & (dstate(right_sector~(lock))=closed) & (wlevel(right_sector(left_sector~(lock)))/=wlevel(lock))
6.0379349666666664E7,1.6570417233333334E8,-1.0,3.651585393333333E8:(River<<:SECTORS) & (Locks<<:SECTORS) & (River\/Locks=SECTORS) & (River/\Locks={}) & (left_sector:GATES>->SECTORS) & (right_sector:GATES>->SECTORS) & (TOPOLOGY) & (!dd1.(dd1:GATES => left_sector(dd1):River <=> right_sector(dd1):Locks)) & (Locks<:ran(left_sector)) & (Locks<:ran(right_sector)) & (correct_level(wlevel)) & (dstate:GATES-->GATE_STATE) & (!dd2.(dd2:GATES&dstate(dd2)=opened => wlevel(left_sector(dd2))=wlevel(right_sector(dd2)))) & (lock:Locks) & (dstate(left_sector~(lock))=closed) & (wlevel(left_sector(right_sector~(lock)))/=wlevel(lock)) & not((lock:Locks) & (dstate(right_sector~(lock))=closed) & (wlevel(right_sector(left_sector~(lock)))/=wlevel(lock)))
6.860856166666667E7,9.303906566666667E7,1.96957658E8,2.803970163333333E8:(River<<:SECTORS) & (Locks<<:SECTORS) & (River\/Locks=SECTORS) & (River/\Locks={}) & (left_sector:GATES>->SECTORS) & (right_sector:GATES>->SECTORS) & (TOPOLOGY) & (!dd1.(dd1:GATES => left_sector(dd1):River <=> right_sector(dd1):Locks)) & (Locks<:ran(left_sector)) & (Locks<:ran(right_sector)) & (correct_level(wlevel)) & (dstate:GATES-->GATE_STATE) & (!dd2.(dd2:GATES&dstate(dd2)=opened => wlevel(left_sector(dd2))=wlevel(right_sector(dd2)))) & (dd:GATES) & (dstate(dd)=opened) & (dd:GATES) & (dstate(dd)=closed) & (wlevel(left_sector(dd))=wlevel(right_sector(dd)))
6.0204955666666664E7,1.15687686E8,-1.0,5.17698491E8:(River<<:SECTORS) & (Locks<<:SECTORS) & (River\/Locks=SECTORS) & (River/\Locks={}) & (left_sector:GATES>->SECTORS) & (right_sector:GATES>->SECTORS) & (TOPOLOGY) & (!dd1.(dd1:GATES => left_sector(dd1):River <=> right_sector(dd1):Locks)) & (Locks<:ran(left_sector)) & (Locks<:ran(right_sector)) & (correct_level(wlevel)) & (dstate:GATES-->GATE_STATE) & (!dd2.(dd2:GATES&dstate(dd2)=opened => wlevel(left_sector(dd2))=wlevel(right_sector(dd2)))) & ((lock:Locks) & (dstate(right_sector~(lock))=closed) & (wlevel(right_sector(left_sector~(lock)))/=wlevel(lock)) => not((ss:Locks) & (rr:River)))
