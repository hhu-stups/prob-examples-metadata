#source:examples/prob_examples/public_examples/EventBTrans/SteveWright_VM/MemMch.mch
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr):StopInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
1.88934943E8,2.5654312133333334E8,2.21445874E8,1.7505850893333333E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (status=LOADING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((status=HALTED))
1.6305311366666666E8,2.0024306166666666E8,1.5680616E8,1.34330902E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) => not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (status=HALTED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & Inst/={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & InvalidInst/<:ValidInst
-1.0,-1.0,1.7383015866666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(InvalidInst/<:ValidInst)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & StopInst/\ExecInst={}
-1.0,-1.0,1.3726952766666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(StopInst/\ExecInst={})
1.7511770633333334E8,2.3552347933333334E8,1.9710232266666666E8,1.4518087113333333E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) => StopInst/\ExecInst={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & JumpInst/\IncrInst={}
2.0069581933333334E8,2.5580522466666666E8,3.5751632E8,1.6978083596666667E9:not((ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) => JumpInst/\IncrInst={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & StopInst/\JumpInst={}
-1.0,-1.0,1.85854314E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(StopInst/\JumpInst={})
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & Op1WriteInst/<:ResultWriteInst
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & Op2WriteInst/<:ResultWriteInst
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & SingleOpInst/<:DualOpInst
-1.0,-1.0,1.9353008033333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(SingleOpInst/<:DualOpInst)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & Data/={}
-1.0,-1.0,1.9410429233333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(Data/={})
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & InstArrayDom/={}
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & 0/:RwDom
-1.0,-1.0,1.9829844766666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(0/:RwDom)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & RwDom/={}
-1.0,-1.0,1.7832533E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not(0/:RoDom)
-1.0,-1.0,1.150766076E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & not((Inst/={}) & (InvalidInst/<:ValidInst) & (StopInst/\ExecInst={}) & (JumpInst/\IncrInst={}) & (StopInst/\IncrInst={}) & (StopInst/\JumpInst={}) & (Op1WriteInst/<:ResultWriteInst) & (Op2WriteInst/<:ResultWriteInst) & (SingleOpInst/<:DualOpInst) & (Data/={}) & (InstArrayDom/={}) & (0/:RwDom) & (RwDom/={}) & (0/:RoDom) & (RoDom/={}))
-1.0,-1.0,1.1975116623333333E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):StopInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):StopInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):StopInst) & (status=RUNNING))
-1.0,-1.0,1.78210977E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,3.03034136E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.97461493E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,1.4855317833333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (status=LOADING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((status=LOADING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.49244328E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,1.0218808553333334E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,1.0637930523333334E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (status=HALTED))
-1.0,-1.0,1.76041241E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((status=FAILED)))
-1.0,-1.0,1.06448455E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,1.3372996193333333E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,2.1305900666666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst) & (status=RUNNING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):StopInst) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):StopInst) & (status=RUNNING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((status=LOADING)))
-1.0,-1.0,1.8765891966666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (status=HALTED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((status=HALTED))
-1.0,-1.0,1.56231296E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((status=FAILED)))
-1.0,-1.0,1.6893135166666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,1.5036667733333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,2.2036224E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpAlwaysInst) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,1.65655214E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((status=LOADING)))
-1.0,-1.0,3.97874199E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & (status=HALTED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((status=HALTED)))
-1.0,-1.0,2.1214527333333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((status=FAILED)))
-1.0,-1.0,1.6035225766666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.1339752773333333E9,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,3.222911936666667E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,1.7889982166666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & (status=LOADING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & not((status=LOADING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) => not((status=LOADING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) => not((status=HALTED)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) => not((status=FAILED)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,2.47475907E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=FALSE) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,3.01947615E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & (status=HALTED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=LOADING)) => (status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & not((status=HALTED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((status=HALTED)))
-1.0,-1.0,1.2794874266666667E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=LOADING)) => (status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((status=FAILED)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=LOADING)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=LOADING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.88150509E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=LOADING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=LOADING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,1.4491610033333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & (status=FAILED)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=HALTED)) => (status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & not((status=FAILED))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=HALTED) => not((status=FAILED)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=HALTED) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.5815726333333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=HALTED)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,1.4173005733333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & (instArray(instPtr)/:ValidInst) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=HALTED) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=HALTED) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,1.3033603433333333E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=FAILED)) => (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED) & not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=FAILED) => not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,1.51345456E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED) & (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((status=FAILED)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((status=FAILED) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (status=FAILED) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) & not((instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & ((instArray(instPtr):JumpCondInst) & (jumpConditional=TRUE) & (resReadable=TRUE) & (Data2Nat(result):InstArrayDom) & (status=RUNNING) => not((instArray(instPtr)/:ValidInst) & (status=RUNNING)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (not((instArray(instPtr):JumpAlwaysInst) & (resReadable=TRUE) & (Data2Nat(result)/:InstArrayDom) & (status=RUNNING)) => (instArray(instPtr)/:ValidInst) & (status=RUNNING))
-1.0,-1.0,1.2065149266666667E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1Writable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => op1Writable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Writable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => op1Writable:BOOL))
6.4431098333333336E7,6.2949788333333336E7,9.1254295E7,7.4673276E7:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2Writable:BOOL & instArray(instPtr):StopInst&status=RUNNING => op2Writable:BOOL
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Writable:BOOL) => instArray(instPtr):StopInst&status=RUNNING => op2Writable:BOOL)
-1.0,-1.0,1.38317077E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2Writable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => op2Writable:BOOL)
-1.0,-1.0,1.7357339933333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instArray:InstArrayDom-->Inst & not(instArray(instPtr):StopInst&status=RUNNING => instArray:InstArrayDom-->Inst)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instArray:InstArrayDom-->Inst) => not(instArray(instPtr):StopInst&status=RUNNING => instArray:InstArrayDom-->Inst))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Readable:BOOL) => instArray(instPtr):StopInst&status=RUNNING => op2Readable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instPtr:InstArrayDom & instArray(instPtr):StopInst&status=RUNNING => instPtr:InstArrayDom
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:InstArrayDom) => instArray(instPtr):StopInst&status=RUNNING => instPtr:InstArrayDom)
-1.0,-1.0,1.27693403E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instPtr:InstArrayDom & not(instArray(instPtr):StopInst&status=RUNNING => instPtr:InstArrayDom)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:InstArrayDom) => not(instArray(instPtr):StopInst&status=RUNNING => instPtr:InstArrayDom))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:POW(INTEGER*Data)) => instArray(instPtr):StopInst&status=RUNNING => roArray:POW(INTEGER*Data))
-1.0,-1.0,1.1886018033333333E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:POW(INTEGER*Data) & not(instArray(instPtr):StopInst&status=RUNNING => roArray:POW(INTEGER*Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:POW(INTEGER*Data)) => not(instArray(instPtr):StopInst&status=RUNNING => roArray:POW(INTEGER*Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instArray:POW(INTEGER*Inst)) => instArray(instPtr):StopInst&status=RUNNING => instArray:POW(INTEGER*Inst))
-1.0,-1.0,1.31263852E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instArray:POW(INTEGER*Inst) & not(instArray(instPtr):StopInst&status=RUNNING => instArray:POW(INTEGER*Inst))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instArray:POW(INTEGER*Inst)) => not(instArray(instPtr):StopInst&status=RUNNING => instArray:POW(INTEGER*Inst)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Readable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => op1Readable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(status:Status) => not(instArray(instPtr):StopInst&status=RUNNING => status:Status))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:RoDom-->Data & instArray(instPtr):StopInst&status=RUNNING => roArray:RoDom-->Data
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:RoDom-->Data) => instArray(instPtr):StopInst&status=RUNNING => roArray:RoDom-->Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:RoDom-->Data) => not(instArray(instPtr):StopInst&status=RUNNING => roArray:RoDom-->Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resReadable:BOOL) => instArray(instPtr):StopInst&status=RUNNING => resReadable:BOOL)
-1.0,-1.0,1.96946367E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & resReadable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => resReadable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resReadable:BOOL) => not(instArray(instPtr):StopInst&status=RUNNING => resReadable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resWritable:BOOL) => instArray(instPtr):StopInst&status=RUNNING => resWritable:BOOL)
-1.0,-1.0,1.4247971066666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & resWritable:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => resWritable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:INTEGER) => instArray(instPtr):StopInst&status=RUNNING => instPtr:INTEGER)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:POW(INTEGER*Data)) => instArray(instPtr):StopInst&status=RUNNING => rwArray:POW(INTEGER*Data))
-1.0,-1.0,1.3261318533333333E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & rwArray:POW(INTEGER*Data) & not(instArray(instPtr):StopInst&status=RUNNING => rwArray:POW(INTEGER*Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:POW(INTEGER*Data)) => not(instArray(instPtr):StopInst&status=RUNNING => rwArray:POW(INTEGER*Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & rwArray:RwDom-->Data & instArray(instPtr):StopInst&status=RUNNING => rwArray:RwDom-->Data
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:RwDom-->Data) => not(instArray(instPtr):StopInst&status=RUNNING => rwArray:RwDom-->Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(jumpConditional:BOOL) => instArray(instPtr):StopInst&status=RUNNING => jumpConditional:BOOL)
-1.0,-1.0,1.2391845833333333E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & jumpConditional:BOOL & not(instArray(instPtr):StopInst&status=RUNNING => jumpConditional:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2:Data) => not(instArray(instPtr):StopInst&status=RUNNING => op2:Data))
-1.0,-1.0,3.185110806666667E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & result:Data & not(instArray(instPtr):StopInst&status=RUNNING => result:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1:Data) => instArray(instPtr):StopInst&status=RUNNING => op1:Data)
-1.0,-1.0,1.3255223766666667E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1:Data & not(instArray(instPtr):StopInst&status=RUNNING => op1:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status) & (instArray(instPtr):StopInst&status=RUNNING => op1Writable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => op2Writable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => instArray:InstArrayDom-->Inst) & (instArray(instPtr):StopInst&status=RUNNING => op2Readable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => instPtr:InstArrayDom) & (instArray(instPtr):StopInst&status=RUNNING => roArray:POW(INTEGER*Data)) & (instArray(instPtr):StopInst&status=RUNNING => instArray:POW(INTEGER*Inst)) & (instArray(instPtr):StopInst&status=RUNNING => op1Readable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => status:Status) & (instArray(instPtr):StopInst&status=RUNNING => roArray:RoDom-->Data) & (instArray(instPtr):StopInst&status=RUNNING => resReadable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => resWritable:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => instPtr:INTEGER) & (instArray(instPtr):StopInst&status=RUNNING => rwArray:POW(INTEGER*Data)) & (instArray(instPtr):StopInst&status=RUNNING => rwArray:RwDom-->Data) & (instArray(instPtr):StopInst&status=RUNNING => jumpConditional:BOOL) & (instArray(instPtr):StopInst&status=RUNNING => op2:Data) & (instArray(instPtr):StopInst&status=RUNNING => result:Data) & (instArray(instPtr):StopInst&status=RUNNING => op1:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1Writable:BOOL & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Writable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Writable:BOOL) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Writable:BOOL))
-1.0,-1.0,1.3763414566666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1Writable:BOOL & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Writable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Writable:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Writable:BOOL)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Writable:BOOL) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Writable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Writable:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Writable:BOOL)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instArray:InstArrayDom-->Inst) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:InstArrayDom-->Inst))
-1.0,-1.0,2.6370473933333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instArray:InstArrayDom-->Inst & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:InstArrayDom-->Inst))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instArray:InstArrayDom-->Inst) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:InstArrayDom-->Inst)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2Readable:BOOL & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Readable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2Readable:BOOL) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Readable:BOOL))
-1.0,-1.0,1.6172715333333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2Readable:BOOL & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Readable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instPtr:InstArrayDom & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => ptrInc+instPtr:InstArrayDom)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:InstArrayDom) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => ptrInc+instPtr:InstArrayDom)))
-1.0,-1.0,1.8497172933333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:POW(INTEGER*Data) & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:POW(INTEGER*Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:POW(INTEGER*Data)) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:POW(INTEGER*Data))))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & instArray:POW(INTEGER*Inst) & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:POW(INTEGER*Inst))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1Readable:BOOL & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Readable:BOOL)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Readable:BOOL) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Readable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1Readable:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Readable:BOOL)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(status:Status) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => status:Status))
-1.0,-1.0,1.7894663833333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & status:Status & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => status:Status))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(status:Status) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => status:Status)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:RoDom-->Data & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:RoDom-->Data) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data))
-1.0,-1.0,1.89218359E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & roArray:RoDom-->Data & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(roArray:RoDom-->Data) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resReadable:BOOL) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resReadable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resReadable:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resReadable:BOOL)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & resWritable:BOOL & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resWritable:BOOL)
-1.0,-1.0,1.6806150166666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & resWritable:BOOL & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resWritable:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(resWritable:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resWritable:BOOL)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:INTEGER) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instPtr:INTEGER))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(instPtr:INTEGER) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instPtr:INTEGER)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:POW(INTEGER*Data)) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:POW(INTEGER*Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(rwArray:POW(INTEGER*Data)) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:POW(INTEGER*Data))))
-1.0,-1.0,1.8363580566666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & rwArray:RwDom-->Data & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:RwDom-->Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(jumpConditional:BOOL) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => jumpConditional:BOOL))
-1.0,-1.0,1.3438957566666666E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & jumpConditional:BOOL & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => jumpConditional:BOOL))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(jumpConditional:BOOL) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => jumpConditional:BOOL)))
-1.0,-1.0,2.693689373333333E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op2:Data & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2:Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op2:Data) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2:Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(result:Data) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => result:Data))
-1.0,-1.0,1.6087131833333334E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & result:Data & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => result:Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1:Data & !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1:Data)
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1:Data) => !ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1:Data))
-1.0,-1.0,3.10158482E8,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & op1:Data & not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1:Data))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not(op1:Data) => not(!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1:Data)))
-1.0,-1.0,-1.0,-1.0:(ValidInst<:Inst) & (ValidInst/={}) & (InvalidInst<:Inst) & (InvalidInst/={}) & (Inst=InvalidInst\/ValidInst) & (InvalidInst/\ValidInst={}) & (ExecInst<:ValidInst) & (ExecInst/={}) & (StopInst<:ValidInst) & (StopInst/={}) & (ValidInst=StopInst\/ExecInst) & (StopInst/\ExecInst={}) & (IncrInst<:ExecInst) & (IncrInst/={}) & (JumpInst<:ExecInst) & (JumpInst/={}) & (ExecInst=JumpInst\/IncrInst) & (JumpInst/\IncrInst={}) & (NonJumpInst<:IncrInst) & (VectorWriteInst<:IncrInst) & (CondWriteInst<:IncrInst) & (IncrInst=VectorWriteInst\/CondWriteInst\/NonJumpInst) & (VectorWriteInst/\NonJumpInst={}) & (CondWriteInst/\NonJumpInst={}) & (CondWriteInst/\VectorWriteInst={}) & (JumpCondInst<:JumpInst) & (JumpAlwaysInst<:JumpInst) & (JumpInst=JumpAlwaysInst\/JumpCondInst) & (JumpAlwaysInst/\JumpCondInst={}) & (NullInst<:NonJumpInst) & (NullInst/={}) & (Op1WriteInst<:NonJumpInst) & (Op1WriteInst/={}) & (Op2WriteInst<:NonJumpInst) & (Op2WriteInst/={}) & (StoreWriteInst<:NonJumpInst) & (StoreWriteInst/={}) & (NonJumpInst=Op1WriteInst\/Op2WriteInst\/StoreWriteInst\/NullInst) & (ResultWriteInst<:VectorWriteInst) & (VectorWriteInst=ResultWriteInst) & (ResultWriteInst/={}) & (Op1WriteInst/\NullInst={}) & (Op2WriteInst/\NullInst={}) & (ResultWriteInst/\NullInst={}) & (StoreWriteInst/\NullInst={}) & (ResultWriteInst/\Op1WriteInst={}) & (StoreWriteInst/\Op1WriteInst={}) & (ResultWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\Op2WriteInst={}) & (StoreWriteInst/\ResultWriteInst={}) & (Op1WriteImmInst<:Op1WriteInst) & (Op1WriteMemInst<:Op1WriteInst) & (Op1WriteInstPtrInst<:Op1WriteInst) & (Op1WriteInst=Op1WriteImmInst\/Op1WriteMemInst\/Op1WriteInstPtrInst) & (Op1WriteMemInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteImmInst={}) & (Op1WriteInstPtrInst/\Op1WriteMemInst={}) & (Op2WriteImmInst<:Op2WriteInst) & (Op2WriteMemInst<:Op2WriteInst) & (Op2WriteInstPtrInst<:Op2WriteInst) & (Op2WriteInst=Op2WriteImmInst\/Op2WriteMemInst\/Op2WriteInstPtrInst) & (Op2WriteMemInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteImmInst={}) & (Op2WriteInstPtrInst/\Op2WriteMemInst={}) & (SingleOpInst<:ResultWriteInst) & (SingleOpInst/={}) & (DualOpInst<:ResultWriteInst) & (DualOpInst/={}) & (ResultWriteInst=DualOpInst\/SingleOpInst) & (DualOpInst/\SingleOpInst={}) & (SingleOpFunc:Data-->Data*BOOL) & (DualOpFunc:Data*Data-->Data*BOOL) & (CompFunc:Data*Data-->BOOL) & (MaxVector:NATURAL1) & (InstArrayDom=1..MaxVector) & (MinRwPointer:NATURAL1) & (MaxRwPointer:NATURAL1) & (MinRwPointer<=MaxRwPointer) & (RwDom=MinRwPointer..MaxRwPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RwDom&A:RwDom-->Data&d:Data => d=A(x)))) & (MinRoPointer:NATURAL1) & (MaxRoPointer:NATURAL1) & (MinRoPointer<=MaxRoPointer) & (RoDom=MinRoPointer..MaxRoPointer) & (!d,x,A.(d:Data&x:INTEGER&A:POW(INTEGER*Data) => (x:RoDom&A:RoDom-->Data&d:Data => d=A(x)))) & (Data2Nat:Data-->NATURAL) & (Nat2Data:NATURAL-->Data) & (ABlankData:Data) & (Data2Nat(ABlankData)=0) & (Inst2ImmData:Inst-->Data) & (not((status:Status) & (instArray:InstArrayDom-->Inst) & (instPtr:InstArrayDom) & (jumpConditional:BOOL) & (op1:Data) & (op1Writable:BOOL) & (op1Readable:BOOL) & (op2:Data) & (op2Writable:BOOL) & (op2Readable:BOOL) & (result:Data) & (resWritable:BOOL) & (resReadable:BOOL) & (rwArray:RwDom-->Data) & (roArray:RoDom-->Data) & (instArray:POW(INTEGER*Inst)) & (instPtr:INTEGER) & (jumpConditional:BOOL) & (op1:Data) & (op1Readable:BOOL) & (op1Writable:BOOL) & (op2:Data) & (op2Readable:BOOL) & (op2Writable:BOOL) & (resReadable:BOOL) & (resWritable:BOOL) & (result:Data) & (roArray:POW(INTEGER*Data)) & (rwArray:POW(INTEGER*Data)) & (status:Status)) => (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Writable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Writable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:InstArrayDom-->Inst)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2Readable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => ptrInc+instPtr:InstArrayDom)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:POW(INTEGER*Data))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instArray:POW(INTEGER*Inst))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1Readable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => status:Status)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => roArray:RoDom-->Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resReadable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => resWritable:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => instPtr:INTEGER)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:POW(INTEGER*Data))) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => rwArray:RwDom-->Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => jumpConditional:BOOL)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op2:Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => result:Data)) & (!ptrInc.(instArray(instPtr):JumpCondInst&jumpConditional=FALSE&ptrInc:NATURAL1&ptrInc+instPtr:InstArrayDom&status=RUNNING => op1:Data)))
