#source:examples/prob_examples/public_examples/EventBPrologPackages/EventB2Java/MIO.zip_unpacked/MIO/ref6.bcm
5.5551361333333336E7,7.589130833333333E7,-1.0,3.2441405433333335E9:not(not((l:rejectionMsg))) => not((parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg))
6.1707218333333336E7,8.394933966666667E7,1.0741952566666667E8,1.07930694E8:not((parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg)) => (p:PERSON \ person) & (s:STATS) & (l:green) & (p=authorizedLec_per~(l)) & (s=lectorStat(l)) & (l:passedMsg)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ dom(authorizedLec_per)) & (p/:authorizedPer) & (d:openedDoor)
-1.0,-1.0,7.192010933333333E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:dom(perSta)) & (doorSta~(perSta(p)):openedDoor) & (p:PERSON \ person) & (p:authorizedPer) & (p/:dom(authorizedLec_per))
-1.0,-1.0,7.9055607E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:controllerMsg) & (p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p/:dom(authorizedLec_per)) & (p:authorizedPer) & (l |-> p:lectorMsg)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:controllerMsg) & not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
-1.0,-1.0,7.340111666666667E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:redLight) & (l:greenLight)
-1.0,-1.0,1.9750791433333334E8,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:redLight) & (l:green) & (l:greenMsgOff)
-1.0,-1.0,6.6746895333333336E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:greenLight) & (p:PERSON) & (l:LECTORS \ blockedLector)
6.3658281E7,1.02250433E8,-1.0,2.0226894766666666E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (not((l:greenLight)) => (d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:greenLight) & not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
1.4833948766666666E8,4.6539927E7,-1.0,4.747263833333333E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:greenLight) & not((p:dom(perBus)) & (perBus(p):dom(busSta)) & (doorSta~(busSta(perBus(p))):openedDoor))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ person) & (s:STATS) & (l:green) & (p=authorizedLec_per~(l)) & (s=lectorStat(l)) & (l:passedMsg) & (d:openedDoor)
-1.0,-1.0,2.6501291366666666E8,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ person) & (s:STATS) & (l:green) & (p=authorizedLec_per~(l)) & (s=lectorStat(l)) & (l:passedMsg) & (p:dom(perBus)) & (perBus(p):dom(busSta)) & (doorSta~(busSta(perBus(p))):openedDoor)
-1.0,-1.0,6.5095801666666664E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON) & (l:LECTORS \ blockedLector) & (l:greenLight)
-1.0,-1.0,7.396780966666667E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p/:dom(authorizedLec_per)) & (p:authorizedPer) & (l |-> p:lectorMsg) & (p:dom(perSta)) & (s:ran(perSta)) & (p |-> s:perSta)
-1.0,-1.0,7.296782166666667E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p/:dom(authorizedLec_per)) & (p:authorizedPer) & (l |-> p:lectorMsg) & (p:dom(perBus)) & (perBus(p):dom(busSta)) & (doorSta~(busSta(perBus(p))):openedDoor)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (d:openedDoor) & not((l:greenLight))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (d:openedDoor) & not((p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p:dom(authorizedLec_per)or p/:authorizedPer) & (l |-> p:lectorMsg))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (d:openedDoor) & (parked<n) & (parked<m) & (b:BUSES \ dom(busSta)) & (s:STATS \ ran(busSta))
1.16273631E8,7.407853066666667E7,-1.0,3.760756636666667E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & ((p:dom(perSta)) & (s:ran(perSta)) & (p |-> s:perSta) => not((l:greenLight)))
-1.0,-1.0,1.7304891466666666E8,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:dom(perSta)) & (s:ran(perSta)) & (p |-> s:perSta) & (p:dom(perBus)) & (perBus(p):dom(busSta)) & (doorSta~(busSta(perBus(p))):openedDoor)
6.1350469333333336E7,1.46762471E8,-1.0,2.6446607933333334E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & ((l:greenLight) => not((l:red) & (l:redMsgOff)))
1.0726194066666667E8,5.7501516333333336E7,-1.0,1.9552945033333334E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (not((p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p:dom(authorizedLec_per)or p/:authorizedPer) & (l |-> p:lectorMsg)) => (l:green) & (l:greenMsgOff))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (parked<n) & (parked<m) & (b:BUSES \ dom(busSta)) & (s:STATS \ ran(busSta)) & not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
