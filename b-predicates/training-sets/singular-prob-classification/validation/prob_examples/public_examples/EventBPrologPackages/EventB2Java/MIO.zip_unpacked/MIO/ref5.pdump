#source:examples/prob_examples/public_examples/EventBPrologPackages/EventB2Java/MIO.zip_unpacked/MIO/ref5.bcm
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (d:openedDoor)
5.3762516333333336E7,1.0591172233333333E8,-1.0,1.39389001E8:not(not((p:PERSON \ person) & (p:authorizedPer) & (p/:dom(authorizedLec_per)))) => not((parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))))
5.7651209E7,7.197425966666667E7,-1.0,1.61693816E8:not(not((parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))))) => (l:green)
6.3798475666666664E7,7.395016266666667E7,-1.0,2.4424325633333334E8:not((l:green)) => not((parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))))
6.124892E7,7.343613066666667E7,-1.0,1.2806016266666667E8:not(not((parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))))) => (l:red)
1.03471049E8,7.261349333333333E7,-1.0,2.31842634E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (not((p:PERSON \ dom(authorizedLec_per)) & (p/:authorizedPer)) => (l:controllerMsg))
-1.0,-1.0,8.1787961E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (p:PERSON \ dom(authorizedLec_per)) & (p/:authorizedPer) & (p:dom(perBus)) & (perBus(p):dom(busSta)) & (doorSta~(busSta(perBus(p))):openedDoor)
-1.0,-1.0,6.785793066666667E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (p:dom(perSta)) & (doorSta~(perSta(p)):openedDoor) & (p:PERSON \ person) & (s:STATS) & (l:green) & (p=authorizedLec_per~(l)) & (s=lectorStat(l))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (not((p:dom(perSta)) & (doorSta~(perSta(p)):openedDoor)) => (d:openedDoor))
-1.0,-1.0,5.9530102666666664E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (l:controllerMsg) & (p:PERSON) & (l:LECTORS \ blockedLector)
-1.0,-1.0,3.42382389E8,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (p:PERSON) & (l:LECTORS \ blockedLector) & (l:green)
5.7812845333333336E7,1.1440267666666667E8,-1.0,2.16808879E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & ((p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p/:dom(authorizedLec_per)) & (p:authorizedPer) & (l |-> p:lectorMsg) => not((p:PERSON \ person) & (p:authorizedPer) & (p/:dom(authorizedLec_per))))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (not((d:openedDoor)) => (d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (d:openedDoor) & not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
-1.0,-1.0,6.8459264E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (p:PERSON \ person) & (p:authorizedPer) & (p/:dom(authorizedLec_per)) & (p:dom(perSta)) & (s:ran(perSta)) & (p |-> s:perSta)
-1.0,-1.0,6.715646833333333E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (p:dom(perSta)) & (s:ran(perSta)) & (p |-> s:perSta) & (p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p:dom(authorizedLec_per)or p/:authorizedPer) & (l |-> p:lectorMsg)
5.9815847E7,7.328618133333333E7,-1.0,3.28246769E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (parked>0) & (b:dom(busSta)) & (b:authorizedBus) & (l:red)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (parked<n) & (parked<m) & (b:BUSES \ dom(busSta)) & (s:STATS \ ran(busSta)) & not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
-1.0,-1.0,4.66257127E8,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (l:green) & (l:red)
1.36799193E8,4.2180934463333335E9,-1.0,8.2478128E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus)) => (p:dom(perBus)) & (perBus(p):dom(busSta)) & (doorSta~(busSta(perBus(p))):openedDoor))
1.69322556E8,2.25419657E8,-1.0,7.113068873333334E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus) & not((p:dom(perBus)) & (perBus(p):dom(busSta)) & (doorSta~(busSta(perBus(p))):openedDoor))
