#source:examples/prob_examples/public_examples/EventBPrologPackages/GraphColouring/coloringv5.zip_unpacked/coloringv5/COLORING6.bcm
1.4507100866666666E8,1.9246458166666666E8,-1.0,4.452935903333333E8:not((node:NODES) & (graph(node)/=({} oftype POW(NODES))) & (color:COLORS) & (color/:forbiddenColors(node)) & (control(node)=G(node)) & (send(node)=({} oftype POW(COLORS))) & (receiveFrom(node)=({} oftype POW(NODES))) & (block(node)=({} oftype POW(NODES))) & (hasFinished(node)=FALSE)) => not((colored_nodes_m0:NODES +-> COLORS) & (colored_nodes_m1:NODES +-> COLORS) & (has_color_m1<:NODES) & (!n1 oftype NODES.!n2 oftype NODES.n1 |-> n2:GRAPH&n1:dom(colored_nodes_m1)&n2:dom(colored_nodes_m1)=>colored_nodes_m1(n1)/=colored_nodes_m1(n2)) & (!n oftype NODES.n/:has_color_m1<=>n/:dom(colored_nodes_m1)) & (!n oftype NODES.n:has_color_m1<=>n:dom(colored_nodes_m1)) & (dom(GRAPH)=has_color_m1=>(!node oftype NODES.node:dom(GRAPH)=>node:dom(colored_nodes_m1))) & (graph:NODES --> POW(NODES)) & (forbiddenColors:NODES --> POW(COLORS)) & (colors:NODES --> POW(COLORS)) & (control:NODES --> POW(NODES)) & (hasFinished:NODES --> BOOL) & (send:NODES +-> POW(COLORS)) & (receiveFrom:NODES --> POW(NODES)) & (receiveFromNode:NODES --> (NODES +-> POW(COLORS))) & (NODES=dom(graph)) & (NODES=dom(colors)) & (NODES=dom(forbiddenColors)) & (NODES=dom(control)) & (NODES=dom(hasFinished)) & (NODES=dom(send)) & (NODES=dom(receiveFrom)) & (!n oftype NODES.receiveFrom(n)=dom(receiveFromNode(n))) & (block:NODES --> POW(NODES)) & (NODES=dom(block)) & (!node oftype NODES.hasFinished(node)=FALSE=>node/:dom(colored_nodes_m1)) & (!n oftype NODES.hasFinished(n)=TRUE=>graph(n)=({} oftype POW(NODES))) & (!n oftype NODES.hasFinished(n)=FALSE=>n/:has_color_m1) & (!n1 oftype NODES.n1:dom(colored_nodes_m1)=>{colored_nodes_m1(n1)}=colors(n1)) & (!n1 oftype NODES.!n2 oftype NODES.n1:dom(colored_nodes_m1)&n2:dom(colored_nodes_m1)&n1:G(n2)&n2:G(n1)=>colored_nodes_m1(n1)/=colored_nodes_m1(n2)) & (!n1 oftype NODES.n1:dom(colored_nodes_m1)=>graph(n1)=({} oftype POW(NODES))) & (!n1 oftype NODES.!n2 oftype NODES.n1:dom(colored_nodes_m1)&n2:dom(colored_nodes_m1)&n1:G(n2)&n2:G(n1)=>n1/:graph(n2)&n2/:graph(n1)))
-1.0,-1.0,-1.0,-1.0:not((node:NODES) & (graph(node)/=({} oftype POW(NODES))) & (receiveFrom(node)=G(node)) & (control(node)/=({} oftype POW(NODES))) & (neighbour:G(node)) & (neighbour:receiveFrom(node)) & (neighbour:control(node)) & (neighbour/:graph(node)) & (node:block(neighbour))) => (colored_nodes_m0:NODES +-> COLORS) & (colored_nodes_m1:NODES +-> COLORS) & (has_color_m1<:NODES) & (!n1 oftype NODES.!n2 oftype NODES.n1 |-> n2:GRAPH&n1:dom(colored_nodes_m1)&n2:dom(colored_nodes_m1)=>colored_nodes_m1(n1)/=colored_nodes_m1(n2)) & (!n oftype NODES.n/:has_color_m1<=>n/:dom(colored_nodes_m1)) & (!n oftype NODES.n:has_color_m1<=>n:dom(colored_nodes_m1)) & (dom(GRAPH)=has_color_m1=>(!node oftype NODES.node:dom(GRAPH)=>node:dom(colored_nodes_m1))) & (graph:NODES --> POW(NODES)) & (forbiddenColors:NODES --> POW(COLORS)) & (colors:NODES --> POW(COLORS)) & (control:NODES --> POW(NODES)) & (hasFinished:NODES --> BOOL) & (send:NODES +-> POW(COLORS)) & (receiveFrom:NODES --> POW(NODES)) & (receiveFromNode:NODES --> (NODES +-> POW(COLORS))) & (NODES=dom(graph)) & (NODES=dom(colors)) & (NODES=dom(forbiddenColors)) & (NODES=dom(control)) & (NODES=dom(hasFinished)) & (NODES=dom(send)) & (NODES=dom(receiveFrom)) & (!n oftype NODES.receiveFrom(n)=dom(receiveFromNode(n))) & (block:NODES --> POW(NODES)) & (NODES=dom(block)) & (!node oftype NODES.hasFinished(node)=FALSE=>node/:dom(colored_nodes_m1)) & (!n oftype NODES.hasFinished(n)=TRUE=>graph(n)=({} oftype POW(NODES))) & (!n oftype NODES.hasFinished(n)=FALSE=>n/:has_color_m1) & (!n1 oftype NODES.n1:dom(colored_nodes_m1)=>{colored_nodes_m1(n1)}=colors(n1)) & (!n1 oftype NODES.!n2 oftype NODES.n1:dom(colored_nodes_m1)&n2:dom(colored_nodes_m1)&n1:G(n2)&n2:G(n1)=>colored_nodes_m1(n1)/=colored_nodes_m1(n2)) & (!n1 oftype NODES.n1:dom(colored_nodes_m1)=>graph(n1)=({} oftype POW(NODES))) & (!n1 oftype NODES.!n2 oftype NODES.n1:dom(colored_nodes_m1)&n2:dom(colored_nodes_m1)&n1:G(n2)&n2:G(n1)=>n1/:graph(n2)&n2/:graph(n1))
1.00316598E8,1.2455995033333333E8,-1.0,3.294705053333333E8:not((node:NODES) & (graph(node)/=({} oftype POW(NODES))) & (receiveFrom(node)=G(node)) & (control(node)/=({} oftype POW(NODES))) & (neighbour:G(node)) & (neighbour:receiveFrom(node)) & (neighbour:control(node)) & (neighbour/:graph(node)) & (node:block(neighbour))) => not((colored_nodes_m0:NODES +-> COLORS) & (colored_nodes_m1:NODES +-> COLORS) & (has_color_m1<:NODES) & (!n1 oftype NODES.!n2 oftype NODES.n1 |-> n2:GRAPH&n1:dom(colored_nodes_m1)&n2:dom(colored_nodes_m1)=>colored_nodes_m1(n1)/=colored_nodes_m1(n2)) & (!n oftype NODES.n/:has_color_m1<=>n/:dom(colored_nodes_m1)) & (!n oftype NODES.n:has_color_m1<=>n:dom(colored_nodes_m1)) & (dom(GRAPH)=has_color_m1=>(!node oftype NODES.node:dom(GRAPH)=>node:dom(colored_nodes_m1))) & (graph:NODES --> POW(NODES)) & (forbiddenColors:NODES --> POW(COLORS)) & (colors:NODES --> POW(COLORS)) & (control:NODES --> POW(NODES)) & (hasFinished:NODES --> BOOL) & (send:NODES +-> POW(COLORS)) & (receiveFrom:NODES --> POW(NODES)) & (receiveFromNode:NODES --> (NODES +-> POW(COLORS))) & (NODES=dom(graph)) & (NODES=dom(colors)) & (NODES=dom(forbiddenColors)) & (NODES=dom(control)) & (NODES=dom(hasFinished)) & (NODES=dom(send)) & (NODES=dom(receiveFrom)) & (!n oftype NODES.receiveFrom(n)=dom(receiveFromNode(n))) & (block:NODES --> POW(NODES)) & (NODES=dom(block)) & (!node oftype NODES.hasFinished(node)=FALSE=>node/:dom(colored_nodes_m1)) & (!n oftype NODES.hasFinished(n)=TRUE=>graph(n)=({} oftype POW(NODES))) & (!n oftype NODES.hasFinished(n)=FALSE=>n/:has_color_m1) & (!n1 oftype NODES.n1:dom(colored_nodes_m1)=>{colored_nodes_m1(n1)}=colors(n1)) & (!n1 oftype NODES.!n2 oftype NODES.n1:dom(colored_nodes_m1)&n2:dom(colored_nodes_m1)&n1:G(n2)&n2:G(n1)=>colored_nodes_m1(n1)/=colored_nodes_m1(n2)) & (!n1 oftype NODES.n1:dom(colored_nodes_m1)=>graph(n1)=({} oftype POW(NODES))) & (!n1 oftype NODES.!n2 oftype NODES.n1:dom(colored_nodes_m1)&n2:dom(colored_nodes_m1)&n1:G(n2)&n2:G(n1)=>n1/:graph(n2)&n2/:graph(n1)))
