#source:examples/prob_examples/public_examples/TLC/Deadlock/GraphIsoVerySimple.mch
5.7945264E7,6.3164806666666664E7,4.8077831666666664E7,1.1863615233333333E8:not((n=5) & (graph1:Nodes<->Nodes) & (graph2:Nodes<->Nodes) & (graph1={(1,2),(2,3),(3,4),(4,5),(5,5)}) & (graph2={(2,4),(4,1),(1,3),(3,5),(5,5)}) & (p:1..n>->>1..n) & (!i.(i:1..n => p[graph1[{i}]]=graph2[p[{i}]])) & not((i:Nodes) & (i:idx))) => (idx<:1..n)
5.9819152666666664E7,6.5251104666666664E7,4.764733E7,1.3236152433333333E8:not((n=5) & (graph1:Nodes<->Nodes) & (graph2:Nodes<->Nodes) & (graph1={(1,2),(2,3),(3,4),(4,5),(5,5)}) & (graph2={(2,4),(4,1),(1,3),(3,5),(5,5)}) & (p:1..n>->>1..n) & (!i.(i:1..n => p[graph1[{i}]]=graph2[p[{i}]])) & (i:Nodes) & (i:idx)) => not((idx<:1..n))
5.7447109666666664E7,6.7941298E7,-1.0,1.0107963666666667E8:(n=5) & (graph1:Nodes<->Nodes) & (graph2:Nodes<->Nodes) & (graph1={(1,2),(2,3),(3,4),(4,5),(5,5)}) & (graph2={(2,4),(4,1),(1,3),(3,5),(5,5)}) & (p:1..n>->>1..n) & (!i.(i:1..n => p[graph1[{i}]]=graph2[p[{i}]])) & (not((idx<:1..n)) => not((i:1..n&i:idx&idx-{i}<:1..n)))
