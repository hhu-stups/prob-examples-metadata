#source:examples/prob_examples/public_examples/EventBPrologPackages/Advance/SafetyMetroSystem_full_23_08_2012.zip_unpacked/SafetyMetroSystem/Train.bcm
6.0203E7,7.139862833333333E7,-1.0,9.031655933333333E7:not((trns<:TRAIN) & (braking<:trns) & (speed:trns --> NAT) & (permit:trns --> BOOL) & (emergency_button:trns --> BOOL) & (door_state:DOOR --> DOOR_STATE) & (door:trns --> POW(DOOR)) & (!t1 oftype TRAIN,t2 oftype TRAIN.t1:dom(door)&t2:dom(door)&t1/=t2=>door(t1)/\door(t2)=({} oftype POW(DOOR))) & (!t oftype TRAIN.t:dom(door)=>(#d oftype POW(DOOR).d<:door(t)&door_state[d]={OPEN}=>speed(t)=0)) & (!t oftype TRAIN.t:dom(door)&speed(t)>0=>door(t)<:door_state~[{CLOSED}])) => (t1:TRAIN) & (t1:dom(door)) & (c1:CDV) & (c2:CDV) & (speed(t1)>0) & (permit(t1)=TRUE)
-1.0,-1.0,-1.0,-1.0:(trns<:TRAIN) & (braking<:trns) & (speed:trns --> NAT) & (permit:trns --> BOOL) & (emergency_button:trns --> BOOL) & (door_state:DOOR --> DOOR_STATE) & (door:trns --> POW(DOOR)) & (!t1 oftype TRAIN,t2 oftype TRAIN.t1:dom(door)&t2:dom(door)&t1/=t2=>door(t1)/\door(t2)=({} oftype POW(DOOR))) & (!t oftype TRAIN.t:dom(door)=>(#d oftype POW(DOOR).d<:door(t)&door_state[d]={OPEN}=>speed(t)=0)) & (!t oftype TRAIN.t:dom(door)&speed(t)>0=>door(t)<:door_state~[{CLOSED}]) & not((trns:POW(TRAIN)) & (door_state:POW(DOOR ** DOOR_STATE)) & (braking:POW(TRAIN)) & (speed:POW(TRAIN ** INT)) & (permit:POW(TRAIN ** BOOL)) & (door:POW(TRAIN ** POW(DOOR))) & (emergency_button:POW(TRAIN ** BOOL)) & (!t oftype TRAIN.t:dom(door)&door(t)/\door_state~[{OPEN}]=({} oftype POW(DOOR))=>door(t)<:door_state~[{CLOSED}]))
-1.0,-1.0,-1.0,-1.0:(trns<:TRAIN) & (braking<:trns) & (speed:trns --> NAT) & (permit:trns --> BOOL) & (emergency_button:trns --> BOOL) & (door_state:DOOR --> DOOR_STATE) & (door:trns --> POW(DOOR)) & (!t1 oftype TRAIN,t2 oftype TRAIN.t1:dom(door)&t2:dom(door)&t1/=t2=>door(t1)/\door(t2)=({} oftype POW(DOOR))) & (!t oftype TRAIN.t:dom(door)=>(#d oftype POW(DOOR).d<:door(t)&door_state[d]={OPEN}=>speed(t)=0)) & (!t oftype TRAIN.t:dom(door)&speed(t)>0=>door(t)<:door_state~[{CLOSED}]) & (t1:TRAIN) & (t1:dom(door)) & (c1:CDV) & (c2:CDV) & (speed(t1)>0) & (permit(t1)=TRUE) & not((t1:TRAIN) & (t1:dom(door)) & (c1:CDV) & (c2:CDV) & (speed(t1)>0) & (door(t1)/\door_state~[{OPEN}]=({} oftype POW(DOOR))) & (permit(t1)=TRUE))
