#source:examples/prob_examples/public_examples/EventBPrologPackages/EventB2Java/MIO.zip_unpacked/MIO/ref6.bcm
6.0434384333333336E7,4.3573674E7,9.747474406666666E8,8.962382733333333E7:not((parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg)) => not((l:redLight))
5.5682453666666664E7,5.5421246666666664E7,-1.0,9.777849533333333E7:not(not((p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p/:dom(authorizedLec_per)) & (p:authorizedPer) & (l |-> p:lectorMsg))) => (parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg)
-1.0,-1.0,8.432962533333333E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ dom(authorizedLec_per)) & (p/:authorizedPer) & (p:dom(perSta)) & (doorSta~(perSta(p)):openedDoor)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:rejectionMsg) & not((l:red) & (l:redMsgOff))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (not((p:dom(perSta)) & (doorSta~(perSta(p)):openedDoor)) => (d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
-1.0,-1.0,6.5619494333333336E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:controllerMsg) & (p:PERSON) & (l:LECTORS \ blockedLector)
6.1851394E7,1.3143503333333333E8,-1.0,2.2400211166666666E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & ((l:controllerMsg) => not((l:red) & (l:redMsgOff)))
-1.0,-1.0,1.9750791433333334E8,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:redLight) & (l:green) & (l:greenMsgOff)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:greenLight) & not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
-1.0,-1.0,2.97327242E8,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ person) & (s:STATS) & (l:green) & (p=authorizedLec_per~(l)) & (s=lectorStat(l)) & (l:passedMsg) & (l:greenLight)
-1.0,-1.0,7.0772408E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ person) & (s:STATS) & (l:green) & (p=authorizedLec_per~(l)) & (s=lectorStat(l)) & (l:passedMsg) & (p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p:dom(authorizedLec_per)or p/:authorizedPer) & (l |-> p:lectorMsg)
-1.0,-1.0,7.532300966666667E7,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON) & (l:LECTORS \ blockedLector) & (p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p/:dom(authorizedLec_per)) & (p:authorizedPer) & (l |-> p:lectorMsg)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON) & (l:LECTORS \ blockedLector) & not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p/:dom(authorizedLec_per)) & (p:authorizedPer) & (l |-> p:lectorMsg) & (d:openedDoor)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p/:dom(authorizedLec_per)) & (p:authorizedPer) & (l |-> p:lectorMsg) & (p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p:dom(authorizedLec_per)or p/:authorizedPer) & (l |-> p:lectorMsg)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p/:dom(authorizedLec_per)) & (p:authorizedPer) & (l |-> p:lectorMsg) & not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (d:openedDoor) & (l:greenLight)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (d:openedDoor) & (l:green) & (l:greenMsgOff)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (p:PERSON \ person) & (p:authorizedPer) & (p/:dom(authorizedLec_per)) & (p:PERSON \ person) & (l:LECTORS) & (l/:green\/red) & (p:dom(authorizedLec_per)or p/:authorizedPer) & (l |-> p:lectorMsg)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:greenLight) & not((l:green) & (l:greenMsgOff))
2.2443885266666666E8,1.10227681E8,-1.0,3.28794721E8:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (parked>0) & (b:dom(busSta)) & (b:authorizedBus) & (d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus)
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (parked>0) & (b:dom(busSta)) & (b:authorizedBus) & not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (parked<n) & (parked<m) & (b:BUSES \ dom(busSta)) & (s:STATS \ ran(busSta)) & not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
-1.0,-1.0,-1.0,-1.0:(parked:0 .. min({n,m})) & (busSta:BUSES >+> STATS) & (finite(busSta)) & (card(busSta)=parked) & (openedDoor<:dom(doorSta)) & (doorSta[openedDoor]<:ran(busSta)) & (authorizedBus<:dom(busSta)) & (busSta[authorizedBus]/\doorSta[openedDoor]=({} oftype POW(STATS))) & (person<:PERSON) & (perSta:person +-> STATS) & (perBus:person +-> BUSES) & (dom(perSta)/\dom(perBus)=({} oftype POW(PERSON))) & (dom(perSta)\/dom(perBus)=person) & (authorizedLec_per:PERSON \ person >+> LECTORS) & (green<:LECTORS) & (red<:LECTORS) & (green/\red=({} oftype POW(LECTORS))) & (green=ran(authorizedLec_per)) & (authorizedPer<:PERSON) & (person<:authorizedPer) & (authorizedLec_per~[green]<:authorizedPer) & (blockedLector<:LECTORS) & (lectorMsg:LECTORS +-> PERSON) & (controllerMsg<:LECTORS) & (dom(lectorMsg)\/green\/red\/controllerMsg=blockedLector) & (dom(lectorMsg)/\(green\/red\/controllerMsg)=({} oftype POW(LECTORS))) & (controllerMsg/\(green\/red)=({} oftype POW(LECTORS))) & (greenLight<:LECTORS) & (acceptanceMsg<:LECTORS) & (greenMsgOff<:LECTORS) & (passedMsg<:LECTORS) & (acceptanceMsg\/passedMsg\/greenMsgOff=green) & (acceptanceMsg/\(passedMsg\/greenMsgOff)=({} oftype POW(LECTORS))) & (passedMsg/\greenMsgOff=({} oftype POW(LECTORS))) & (greenLight<:acceptanceMsg) & (redLight<:LECTORS) & (rejectionMsg<:LECTORS) & (redMsgOff<:LECTORS) & (rejectionMsg/\redMsgOff=({} oftype POW(LECTORS))) & (rejectionMsg\/redMsgOff=red) & (redLight<:rejectionMsg) & (l:acceptanceMsg) & not((d:DOORS) & (d/:openedDoor) & (doorSta(d):ran(busSta)) & (busSta~(doorSta(d))/:authorizedBus))
